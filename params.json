{"name":"Sql-anywhere-client","tagline":"Cliente of connection for slqanywhere/sybase database based on PHP class PDO","body":"SQLAnywhereClient\r\n=================\r\n\r\nClasse para conexão com banco de dados Sybase com PHP baseada na biblioteca sqlanywhere.\r\n\r\nClasse foi baseada na Classe Nativa do PDO.\r\n\r\nTODO:\r\n- Testar classe com eficácia\r\n \r\n## Instalação\r\n=================\r\n\r\n1- Primeiro instale o modulo do sqlanywhere em seu PHP [Clincando aqui!](http://scn.sap.com/docs/DOC-40537).\r\n\r\n2- Use o composer para instalar o package ao seu projeto adicionado a linha abaixo ao `require`:\r\n\r\n    // ...\r\n    \"require\": {\r\n        \"cagartner/SQLAnywhereClient\": \"dev-master\"\r\n    },\r\n    // ...\r\n\r\n# Como usar\r\n\r\nAbaixo você ve alguns exemplos de como usar a classe:\r\n\r\n### Conexão `SQLAnywhereClient::__construct`:\r\n\r\n```php\r\n<?php\r\n    require '../vendor/autoload.php';\r\n\r\n    use Cagartner\\SQLAnywhereClient;\r\n\r\n    try {\r\n        $dns = \"uid={usuario};pwd={senha};ENG={nome-do-banco};commlinks=tcpip{host={seu-host};port={sua-porta}}\";\r\n        $con = new SQLAnywhereClient( $dns );\r\n    } catch (Exception $e) {\r\n        echo $e->getMessage();\r\n    }\r\n?>\r\n```\r\nVocê pode definir duas opções iniciais junto com a conexão, que são as seguintes: `auto_commit` e `is_persistent`.\r\n\r\n* `auto_commit` Ativa os commits automaticamente por padrão é `true`;\r\n* `is_persistent` Define conexão no modo persistente por padrão é `false`;\r\n\r\n```php\r\n<?php\r\n    require '../vendor/autoload.php';\r\n\r\n    use Cagartner\\SQLAnywhereClient;\r\n\r\n    try {\r\n        $dns = \"uid={uid};pwd={senha};ENG={};commlinks=tcpip{host={seuuhost};port={suasenha}}\";\r\n        $autocommit = false;\r\n        $persistent = true;\r\n\r\n        $con = new SQLAnywhereClient( $dns, $autocommit, $persistent );\r\n    } catch (Exception $e) {\r\n        echo $e->getMessage();\r\n    }\r\n?>\r\n```\r\n\r\n\r\n### Executar comando SQL `SQLAnywhereClient::exec()`:\r\n\r\n```php\r\n<?php\r\n\r\n    $sql = \"SELECT * FROM Usuarios\";\r\n    $result = $con->exec( $sql );\r\n\r\n    echo \"<pre>\";\r\n    print_r($result->fetch());\r\n    echo \"</pre>\";\r\n    exit;\r\n?>\r\n```\r\n\r\n### Executar comando SQL com retorno de dados `SQLAnywhereClient::query()` :\r\n\r\nMétodo retornar um array com várias posições\r\n\r\n```php\r\n<?php\r\n\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n\r\n    foreach ($con->query( $sql ) as $resultado) {\r\n        print_r($resultado);\r\n    }\r\n    exit;\r\n?>\r\n```\r\n\r\n### Retornar uma linha `SQLAnywhereQuery::fetch`\r\n\r\nRetornar a primeira linha\r\n\r\n```php\r\n<?php\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n    $usuario = $resultado->fetch();\r\n\r\n    print_r($usuario);\r\n    exit;\r\n?>\r\n```\r\n \r\n### Formato de retorno dos dados\r\n\r\nPodemos escolher o formato dos dados no retorno com as seguintes constantes da classe `SQLAnywhereClient`\r\n```php\r\n<?php\r\n    // Retornar em um array com idexação por numero e coluna\r\n    SQLAnywhereClient::FETCH_ARRAY;\r\n\r\n    // Retornar em um array com idexação por coluna\r\n    SQLAnywhereClient::FETCH_ASSOC; // Formato Padrão!\r\n\r\n    // Retornar em um array com idexação por coluna\r\n    SQLAnywhereClient::FETCH_OBJECT;\r\n\r\n    // Retornar em um array com idexação por linha de dados\r\n    SQLAnywhereClient::FETCH_ROW;\r\n\r\n    // Retornar em um array com idexação por colunas\r\n    SQLAnywhereClient::FETCH_FIELD;\r\n?>\r\n```\r\n\r\nExemplo:\r\n\r\n```php\r\n<?php\r\n\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n    $usuario = $resultado->fetch( SQLAnywhereClient::FETCH_OBJECT );\r\n\r\n    print_r($usuario);\r\n    exit;\r\n?>\r\n```\r\n\r\n### Retornar todas as linhas `SQLAnywhereQuery::fetchAll`\r\n\r\nRetornar Todas as linhas encontradas\r\n\r\n```php\r\n<?php\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n    $usuario = $resultado->fetchAll();\r\n\r\n    print_r($usuario);\r\n    exit;\r\n?>\r\n```\r\n\r\nComo no caso assima do fetch, você pode retornar os valores em diferentes formatos utilizando as mesmas constantes, exemplo:\r\n\r\n```php\r\n<?php\r\n\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n    $usuario = $resultado->fetchAll( SQLAnywhereClient::FETCH_OBJECT );\r\n\r\n    print_r($usuario);\r\n    exit;\r\n?>\r\n```\r\n\r\n### Números de linhas `SQLAnywhereQuery::rowCount`\r\n\r\nRetornar o total de linhas encontradas\r\n\r\n```php\r\n<?php\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n\r\n    echo \"Foram encontrados \" . $resultado->rowCount() . \" registros.\";\r\n    exit;\r\n?>\r\n```\r\n\r\nOu também da seguinte maneira: \r\n\r\n```php\r\n<?php\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n\r\n    echo \"Foram encontrados \" . $resultado->count() . \" registros.\";\r\n    exit;\r\n?>\r\n```\r\n\r\n### Números de colunas `SQLAnywhereQuery::fieldCount`\r\n\r\nRetornar o total de colunas encontradas\r\n\r\n```php\r\n<?php\r\n    $sql = \"SELECT nome, email FROM Usuarios\";\r\n    $resultado = $con->exec( $sql );\r\n\r\n    echo \"Foram encontrados \" . $resultado->fieldCount() . \" colunas na tabela.\";\r\n    exit;\r\n?>\r\n```\r\n\r\n### Último Id inserido `SQLAnywhereClient::lastInsertId()` \r\n\r\nRetorna o último o valor do último id inserido na conexão\r\n\r\n```php\r\n<?php\r\n    $sql = \"INSERT INTO Usuarios  nome, email VALUES ('Carlos', 'contato@carlosgartner.com.br')\";\r\n    if ($con->exec( $sql )) {\r\n        echo $con->lastInsertId();\r\n    }\r\n    exit;\r\n?>\r\n```\r\n\r\n### Último Id inserido `SQLAnywhereClient::lastInsertId()` \r\n\r\nRetorna o último o valor do último id inserido na conexão\r\n\r\n```php\r\n<?php\r\n    $sql = \"INSERT INTO Usuarios  nome, email VALUES ('Carlos', 'contato@carlosgartner.com.br')\";\r\n    if ($con->exec( $sql )) {\r\n        echo $con->lastInsertId();\r\n    }\r\n    exit;\r\n?>\r\n```\r\n\r\n### Prepared Statement `SQLAnywhereClient::prepare()`:\r\n\r\nPreparar sql usando `?`:\r\n\r\n```php\r\n<?php\r\n    $sql = \"INSERT INTO Usuarios  nome, email VALUES (?, ?)\";\r\n    $stmnt = $con->prepare( $sql );\r\n    if ($stmnt->execute(array('Carlos', 'contato@carlosgartner.com.br'))) {\r\n         echo $con->lastInsertId();\r\n    }\r\n    exit;\r\n?>\r\n```\r\n\r\nE usando nomes para os parametros:\r\n\r\n```php\r\n<?php\r\n    $sql = \"INSERT INTO Usuarios  nome, email VALUES (:nome, :email)\";\r\n    $stmnt = $con->prepare( $sql );\r\n    if ($stmnt->execute(array(\r\n        ':nome' => 'Carlos', \r\n        ':email' => 'contato@carlosgartner.com.br'\r\n    ))) {\r\n         echo $con->lastInsertId();\r\n    }\r\n    exit;\r\n?>\r\n```\r\n\r\n### Bind Param `SQLAnywherePrepared::bindParam()`:\r\n\r\n```php\r\n<?php\r\n    $sql = \"INSERT INTO Usuarios  nome, email VALUES (:nome, :email)\";\r\n    $stmnt = $con->prepare( $sql );\r\n\r\n    $nome = \"Carlos A.\";\r\n    $email = \"contato@carlosgartner.com.br\";\r\n\r\n    $stmnt->bindParam(':nome', $nome);\r\n    $stmnt->bindParam(':email', $email);\r\n\r\n    if ($stmnt->execute()) {\r\n         echo $con->lastInsertId();\r\n    }\r\n    exit;\r\n?>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}